/*!
 * Bootstrap Grunt task for parsing Less docstrings
 * http://getbootstrap.com
 * Copyright 2014-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

'use strict';

var Markdown = require('markdown-it');

function markdown2html(markdownString) {
  var md = new Markdown();

  // the slice removes the <p>...</p> wrapper output by Markdown processor
  return md.render(markdownString.trim()).slice(3, -5);
}

/*
Mini-language:
  //== This is a normal heading, which starts a section. Sections group variables together.
  //## Optional description for the heading

  //=== This is a subheading.

  //** Optional description for the following variable. You **can** use Markdown in descriptions to discuss `<html>` stuff.
  @foo: #fff;

  //-- This is a heading for a section whose variables shouldn't be customizable

  All other lines are ignored completely.
*/

var CUSTOMIZABLE_HEADING = /^[/]{2}={2}(.*)$/;
var UNCUSTOMIZABLE_HEADING = /^[/]{2}-{2}(.*)$/;
var SUBSECTION_HEADING = /^[/]{2}={3}(.*)$/;
var SECTION_DOCSTRING = /^[/]{2}#{2}(.+)$/;
var VAR_ASSIGNMENT = /^(@[a-zA-Z0-9_-]+):[ ]*([^ ;][^;]*);[ ]*$/;
var VAR_DOCSTRING = /^[/]{2}[*]{2}(.+)$/;

function Section(heading, customizable) {
  this.heading = heading.trim();
  this.id = this.heading.replace(/\s+/g, '-').toLowerCase();
  this.customizable = customizable;
  this.docstring = null;
  this.subsections = [];
}

Section.prototype.addSubSection = function (subsection) {
  this.subsections.push(subsection);
};

function SubSection(heading) {
  this.heading = heading.trim();
  this.id = this.heading.replace(/\s+/g, '-').toLowerCase();
  this.variables = [];
}

SubSection.prototype.addVar = function (variable) {
  this.variables.push(variable);
};

function VarDocstring(markdownString) {
  this.html = markdown2html(markdownString);
}

function SectionDocstring(markdownString) {
  this.html = markdown2html(markdownString);
}

function Variable(name, defaultValue) {
  this.name = name;
  this.defaultValue = defaultValue;
  this.docstring = null;
}

function Tokenizer(fileContent) {
  this._lines = fileContent.split('\n');
  this._next = undefined;
}

Tokenizer.prototype.unshift = function (token) {
  if (this._next !== undefined) {
    throw new Error('Attempted to unshift twice!');
  }
  this._next = token;
};

Tokenizer.prototype._shift = function () {
  // returning null signals EOF
  // returning undefined means the line was ignored
  if (this._next !== undefined) {
    var result = this._next;
    this._next = undefined;
    return result;
  }
  if (this._lines.length <= 0) {
    return null;
  }
  var line = this._lines.shift();
  var match = null;
  match = SUBSECTION_HEADING.exec(line);
  if (match !== null) {
    return new SubSection(match[1]);
  }
  match = CUSTOMIZABLE_HEADING.exec(line);
  if (match !== null) {
    return new Section(match[1], true);
  }
  match = UNCUSTOMIZABLE_HEADING.exec(line);
  if (match !== null) {
    return new Section(match[1], false);
  }
  match = SECTION_DOCSTRING.exec(line);
  if (match !== null) {
    return new SectionDocstring(match[1]);
  }
  match = VAR_DOCSTRING.exec(line);
  if (match !== null) {
    return new VarDocstring(match[1]);
  }
  var commentStart = line.lastIndexOf('//');
  var varLine = commentStart === -1 ? line : line.slice(0, commentStart);
  match = VAR_ASSIGNMENT.exec(varLine);
  if (match !== null) {
    return new Variable(match[1], match[2]);
  }
  return undefined;
};

Tokenizer.prototype.shift = function () {
  while (true) {
    var result = this._shift();
    if (result === undefined) {
      continue;
    }
    return result;
  }
};

function Parser(fileContent) {
  this._tokenizer = new Tokenizer(fileContent);
}

Parser.prototype.parseFile = function () {
  var sections = [];
  while (true) {
    var section = this.parseSection();
    if (section === null) {
      if (this._tokenizer.shift() !== null) {
        throw new Error('Unexpected unparsed section of file remains!');
      }
      return sections;
    }
    sections.push(section);
  }
};

Parser.prototype.parseSection = function () {
  var section = this._tokenizer.shift();
  if (section === null) {
    return null;
  }
  if (!(section instanceof Section)) {
    throw new Error('Expected section heading; got: ' + JSON.stringify(section));
  }
  var docstring = this._tokenizer.shift();
  if (docstring instanceof SectionDocstring) {
    section.docstring = docstring;
  } else {
    this._tokenizer.unshift(docstring);
  }
  this.parseSubSections(section);

  return section;
};

Parser.prototype.parseSubSections = function (section) {
  while (true) {
    var subsection = this.parseSubSection();
    if (subsection === null) {
      if (section.subsections.length === 0) {
        // Presume an implicit initial subsection
        subsection = new SubSection('');
        this.parseVars(subsection);
      } else {
        break;
      }
    }
    section.addSubSection(subsection);
  }

  if (section.subsections.length === 1 && !section.subsections[0].heading && section.subsections[0].variables.length === 0) {
    // Ignore lone empty implicit subsection
    section.subsections = [];
  }
};

Parser.prototype.parseSubSection = function () {
  var subsection = this._tokenizer.shift();
  if (subsection instanceof SubSection) {
    this.parseVars(subsection);
    return subsection;
  }
  this._tokenizer.unshift(subsection);
  return null;
};

Parser.prototype.parseVars = function (subsection) {
  while (true) {
    var variable = this.parseVar();
    if (variable === null) {
      return;
    }
    subsection.addVar(variable);
  }
};

Parser.prototype.parseVar = function () {
  var docstring = this._tokenizer.shift();
  if (!(docstring instanceof VarDocstring)) {
    this._tokenizer.unshift(docstring);
    docstring = null;
  }
  var variable = this._tokenizer.shift();
  if (variable instanceof Variable) {
    variable.docstring = docstring;
    return variable;
  }
  this._tokenizer.unshift(variable);
  return null;
};

module.exports = Parser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NsaWVudC9saWIvYm9vdHN0cmFwL2dydW50L2JzLWxlc3Nkb2MtcGFyc2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTs7QUFFQSxJQUFJLFdBQVcsUUFBUSxhQUFSLENBQWY7O0FBRUEsU0FBUyxhQUFULENBQXVCLGNBQXZCLEVBQXVDO0FBQ3JDLE1BQUksS0FBSyxJQUFJLFFBQUosRUFBVDs7O0FBR0EsU0FBTyxHQUFHLE1BQUgsQ0FBVSxlQUFlLElBQWYsRUFBVixFQUFpQyxLQUFqQyxDQUF1QyxDQUF2QyxFQUEwQyxDQUFDLENBQTNDLENBQVA7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkQsSUFBSSx1QkFBdUIsa0JBQTNCO0FBQ0EsSUFBSSx5QkFBeUIsa0JBQTdCO0FBQ0EsSUFBSSxxQkFBcUIsa0JBQXpCO0FBQ0EsSUFBSSxvQkFBb0Isa0JBQXhCO0FBQ0EsSUFBSSxpQkFBaUIsMkNBQXJCO0FBQ0EsSUFBSSxnQkFBZ0Isb0JBQXBCOztBQUVBLFNBQVMsT0FBVCxDQUFpQixPQUFqQixFQUEwQixZQUExQixFQUF3QztBQUN0QyxPQUFLLE9BQUwsR0FBZSxRQUFRLElBQVIsRUFBZjtBQUNBLE9BQUssRUFBTCxHQUFVLEtBQUssT0FBTCxDQUFhLE9BQWIsQ0FBcUIsTUFBckIsRUFBNkIsR0FBN0IsRUFBa0MsV0FBbEMsRUFBVjtBQUNBLE9BQUssWUFBTCxHQUFvQixZQUFwQjtBQUNBLE9BQUssU0FBTCxHQUFpQixJQUFqQjtBQUNBLE9BQUssV0FBTCxHQUFtQixFQUFuQjtBQUNEOztBQUVELFFBQVEsU0FBUixDQUFrQixhQUFsQixHQUFrQyxVQUFVLFVBQVYsRUFBc0I7QUFDdEQsT0FBSyxXQUFMLENBQWlCLElBQWpCLENBQXNCLFVBQXRCO0FBQ0QsQ0FGRDs7QUFJQSxTQUFTLFVBQVQsQ0FBb0IsT0FBcEIsRUFBNkI7QUFDM0IsT0FBSyxPQUFMLEdBQWUsUUFBUSxJQUFSLEVBQWY7QUFDQSxP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O0FBQ0Q7QUFDRCxPQUFLLFVBQUwsQ0FBZ0IsT0FBaEIsQ0FBd0IsVUFBeEI7QUFDQSxTQUFPLElBQVA7QUFDRCxDQVJEOztBQVVBLE9BQU8sU0FBUCxDQUFpQixTQUFqQixHQUE2QixVQUFVLFVBQVYsRUFBc0I7QUFDakQsU0FBTyxJQUFQLEVBQWE7QUFDWCxRQUFJLFdBQVcsS0FBSyxRQUFMLEVBQWY7QUFDQSxRQUFJLGFBQWEsSUFBakIsRUFBdUI7QUFDckI7QUFDRDtBQUNELGVBQVcsTUFBWCxDQUFrQixRQUFsQjtBQUNEO0FBQ0YsQ0FSRDs7QUFVQSxPQUFPLFNBQVAsQ0FBaUIsUUFBakIsR0FBNEIsWUFBWTtBQUN0QyxNQUFJLFlBQVksS0FBSyxVQUFMLENBQWdCLEtBQWhCLEVBQWhCO0FBQ0EsTUFBSSxFQUFFLHFCQUFxQixZQUF2QixDQUFKLEVBQTBDO0FBQ3hDLFNBQUssVUFBTCxDQUFnQixPQUFoQixDQUF3QixTQUF4QjtBQUNBLGdCQUFZLElBQVo7QUFDRDtBQUNELE1BQUksV0FBVyxLQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsRUFBZjtBQUNBLE1BQUksb0JBQW9CLFFBQXhCLEVBQWtDO0FBQ2hDLGFBQVMsU0FBVCxHQUFxQixTQUFyQjtBQUNBLFdBQU8sUUFBUDtBQUNEO0FBQ0QsT0FBSyxVQUFMLENBQWdCLE9BQWhCLENBQXdCLFFBQXhCO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FiRDs7QUFnQkEsT0FBTyxPQUFQLEdBQWlCLE1BQWpCIiwiZmlsZSI6ImJzLWxlc3Nkb2MtcGFyc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBCb290c3RyYXAgR3J1bnQgdGFzayBmb3IgcGFyc2luZyBMZXNzIGRvY3N0cmluZ3NcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTWFya2Rvd24gPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpO1xuXG5mdW5jdGlvbiBtYXJrZG93bjJodG1sKG1hcmtkb3duU3RyaW5nKSB7XG4gIHZhciBtZCA9IG5ldyBNYXJrZG93bigpO1xuXG4gIC8vIHRoZSBzbGljZSByZW1vdmVzIHRoZSA8cD4uLi48L3A+IHdyYXBwZXIgb3V0cHV0IGJ5IE1hcmtkb3duIHByb2Nlc3NvclxuICByZXR1cm4gbWQucmVuZGVyKG1hcmtkb3duU3RyaW5nLnRyaW0oKSkuc2xpY2UoMywgLTUpO1xufVxuXG5cbi8qXG5NaW5pLWxhbmd1YWdlOlxuICAvLz09IFRoaXMgaXMgYSBub3JtYWwgaGVhZGluZywgd2hpY2ggc3RhcnRzIGEgc2VjdGlvbi4gU2VjdGlvbnMgZ3JvdXAgdmFyaWFibGVzIHRvZ2V0aGVyLlxuICAvLyMjIE9wdGlvbmFsIGRlc2NyaXB0aW9uIGZvciB0aGUgaGVhZGluZ1xuXG4gIC8vPT09IFRoaXMgaXMgYSBzdWJoZWFkaW5nLlxuXG4gIC8vKiogT3B0aW9uYWwgZGVzY3JpcHRpb24gZm9yIHRoZSBmb2xsb3dpbmcgdmFyaWFibGUuIFlvdSAqKmNhbioqIHVzZSBNYXJrZG93biBpbiBkZXNjcmlwdGlvbnMgdG8gZGlzY3VzcyBgPGh0bWw+YCBzdHVmZi5cbiAgQGZvbzogI2ZmZjtcblxuICAvLy0tIFRoaXMgaXMgYSBoZWFkaW5nIGZvciBhIHNlY3Rpb24gd2hvc2UgdmFyaWFibGVzIHNob3VsZG4ndCBiZSBjdXN0b21pemFibGVcblxuICBBbGwgb3RoZXIgbGluZXMgYXJlIGlnbm9yZWQgY29tcGxldGVseS5cbiovXG5cblxudmFyIENVU1RPTUlaQUJMRV9IRUFESU5HID0gL15bL117Mn09ezJ9KC4qKSQvO1xudmFyIFVOQ1VTVE9NSVpBQkxFX0hFQURJTkcgPSAvXlsvXXsyfS17Mn0oLiopJC87XG52YXIgU1VCU0VDVElPTl9IRUFESU5HID0gL15bL117Mn09ezN9KC4qKSQvO1xudmFyIFNFQ1RJT05fRE9DU1RSSU5HID0gL15bL117Mn0jezJ9KC4rKSQvO1xudmFyIFZBUl9BU1NJR05NRU5UID0gL14oQFthLXpBLVowLTlfLV0rKTpbIF0qKFteIDtdW147XSopO1sgXSokLztcbnZhciBWQVJfRE9DU1RSSU5HID0gL15bL117Mn1bKl17Mn0oLispJC87XG5cbmZ1bmN0aW9uIFNlY3Rpb24oaGVhZGluZywgY3VzdG9taXphYmxlKSB7XG4gIHRoaXMuaGVhZGluZyA9IGhlYWRpbmcudHJpbSgpO1xuICB0aGlzLmlkID0gdGhpcy5oZWFkaW5nLnJlcGxhY2UoL1xccysvZywgJy0nKS50b0xvd2VyQ2FzZSgpO1xuICB0aGlzLmN1c3RvbWl6YWJsZSA9IGN1c3RvbWl6YWJsZTtcbiAgdGhpcy5kb2NzdHJpbmcgPSBudWxsO1xuICB0aGlzLnN1YnNlY3Rpb25zID0gW107XG59XG5cblNlY3Rpb24ucHJvdG90eXBlLmFkZFN1YlNlY3Rpb24gPSBmdW5jdGlvbiAoc3Vic2VjdGlvbikge1xuICB0aGlzLnN1YnNlY3Rpb25zLnB1c2goc3Vic2VjdGlvbik7XG59O1xuXG5mdW5jdGlvbiBTdWJTZWN0aW9uKGhlYWRpbmcpIHtcbiAgdGhpcy5oZWFkaW5nID0gaGVhZGluZy50cmltKCk7XG4gIHRoaXMuaWQgPSB0aGlzLmhlYWRpbmcucmVwbGFjZSgvXFxzKy9nLCAnLScpLnRvTG93ZXJDYXNlKCk7XG4gIHRoaXMudmFyaWFibGVzID0gW107XG59XG5cblN1YlNlY3Rpb24ucHJvdG90eXBlLmFkZFZhciA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICB0aGlzLnZhcmlhYmxlcy5wdXNoKHZhcmlhYmxlKTtcbn07XG5cbmZ1bmN0aW9uIFZhckRvY3N0cmluZyhtYXJrZG93blN0cmluZykge1xuICB0aGlzLmh0bWwgPSBtYXJrZG93bjJodG1sKG1hcmtkb3duU3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gU2VjdGlvbkRvY3N0cmluZyhtYXJrZG93blN0cmluZykge1xuICB0aGlzLmh0bWwgPSBtYXJrZG93bjJodG1sKG1hcmtkb3duU3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gVmFyaWFibGUobmFtZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICB0aGlzLmRvY3N0cmluZyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIFRva2VuaXplcihmaWxlQ29udGVudCkge1xuICB0aGlzLl9saW5lcyA9IGZpbGVDb250ZW50LnNwbGl0KCdcXG4nKTtcbiAgdGhpcy5fbmV4dCA9IHVuZGVmaW5lZDtcbn1cblxuVG9rZW5pemVyLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gIGlmICh0aGlzLl9uZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byB1bnNoaWZ0IHR3aWNlIScpO1xuICB9XG4gIHRoaXMuX25leHQgPSB0b2tlbjtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3NoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICAvLyByZXR1cm5pbmcgbnVsbCBzaWduYWxzIEVPRlxuICAvLyByZXR1cm5pbmcgdW5kZWZpbmVkIG1lYW5zIHRoZSBsaW5lIHdhcyBpZ25vcmVkXG4gIGlmICh0aGlzLl9uZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5fbmV4dDtcbiAgICB0aGlzLl9uZXh0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKHRoaXMuX2xpbmVzLmxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGxpbmUgPSB0aGlzLl9saW5lcy5zaGlmdCgpO1xuICB2YXIgbWF0Y2ggPSBudWxsO1xuICBtYXRjaCA9IFNVQlNFQ1RJT05fSEVBRElORy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICByZXR1cm4gbmV3IFN1YlNlY3Rpb24obWF0Y2hbMV0pO1xuICB9XG4gIG1hdGNoID0gQ1VTVE9NSVpBQkxFX0hFQURJTkcuZXhlYyhsaW5lKTtcbiAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBTZWN0aW9uKG1hdGNoWzFdLCB0cnVlKTtcbiAgfVxuICBtYXRjaCA9IFVOQ1VTVE9NSVpBQkxFX0hFQURJTkcuZXhlYyhsaW5lKTtcbiAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBTZWN0aW9uKG1hdGNoWzFdLCBmYWxzZSk7XG4gIH1cbiAgbWF0Y2ggPSBTRUNUSU9OX0RPQ1NUUklORy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICByZXR1cm4gbmV3IFNlY3Rpb25Eb2NzdHJpbmcobWF0Y2hbMV0pO1xuICB9XG4gIG1hdGNoID0gVkFSX0RPQ1NUUklORy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICByZXR1cm4gbmV3IFZhckRvY3N0cmluZyhtYXRjaFsxXSk7XG4gIH1cbiAgdmFyIGNvbW1lbnRTdGFydCA9IGxpbmUubGFzdEluZGV4T2YoJy8vJyk7XG4gIHZhciB2YXJMaW5lID0gY29tbWVudFN0YXJ0ID09PSAtMSA/IGxpbmUgOiBsaW5lLnNsaWNlKDAsIGNvbW1lbnRTdGFydCk7XG4gIG1hdGNoID0gVkFSX0FTU0lHTk1FTlQuZXhlYyh2YXJMaW5lKTtcbiAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBWYXJpYWJsZShtYXRjaFsxXSwgbWF0Y2hbMl0pO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLl9zaGlmdCgpO1xuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFBhcnNlcihmaWxlQ29udGVudCkge1xuICB0aGlzLl90b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKGZpbGVDb250ZW50KTtcbn1cblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZpbGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWN0aW9ucyA9IFtdO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBzZWN0aW9uID0gdGhpcy5wYXJzZVNlY3Rpb24oKTtcbiAgICBpZiAoc2VjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgaWYgKHRoaXMuX3Rva2VuaXplci5zaGlmdCgpICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCB1bnBhcnNlZCBzZWN0aW9uIG9mIGZpbGUgcmVtYWlucyEnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWN0aW9ucztcbiAgICB9XG4gICAgc2VjdGlvbnMucHVzaChzZWN0aW9uKTtcbiAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZVNlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWN0aW9uID0gdGhpcy5fdG9rZW5pemVyLnNoaWZ0KCk7XG4gIGlmIChzZWN0aW9uID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKCEoc2VjdGlvbiBpbnN0YW5jZW9mIFNlY3Rpb24pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBzZWN0aW9uIGhlYWRpbmc7IGdvdDogJyArIEpTT04uc3RyaW5naWZ5KHNlY3Rpb24pKTtcbiAgfVxuICB2YXIgZG9jc3RyaW5nID0gdGhpcy5fdG9rZW5pemVyLnNoaWZ0KCk7XG4gIGlmIChkb2NzdHJpbmcgaW5zdGFuY2VvZiBTZWN0aW9uRG9jc3RyaW5nKSB7XG4gICAgc2VjdGlvbi5kb2NzdHJpbmcgPSBkb2NzdHJpbmc7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fdG9rZW5pemVyLnVuc2hpZnQoZG9jc3RyaW5nKTtcbiAgfVxuICB0aGlzLnBhcnNlU3ViU2VjdGlvbnMoc2VjdGlvbik7XG5cbiAgcmV0dXJuIHNlY3Rpb247XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlU3ViU2VjdGlvbnMgPSBmdW5jdGlvbiAoc2VjdGlvbikge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBzdWJzZWN0aW9uID0gdGhpcy5wYXJzZVN1YlNlY3Rpb24oKTtcbiAgICBpZiAoc3Vic2VjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgaWYgKHNlY3Rpb24uc3Vic2VjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIFByZXN1bWUgYW4gaW1wbGljaXQgaW5pdGlhbCBzdWJzZWN0aW9uXG4gICAgICAgIHN1YnNlY3Rpb24gPSBuZXcgU3ViU2VjdGlvbignJyk7XG4gICAgICAgIHRoaXMucGFyc2VWYXJzKHN1YnNlY3Rpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHNlY3Rpb24uYWRkU3ViU2VjdGlvbihzdWJzZWN0aW9uKTtcbiAgfVxuXG4gIGlmIChzZWN0aW9uLnN1YnNlY3Rpb25zLmxlbmd0aCA9PT0gMSAmJiAhc2VjdGlvbi5zdWJzZWN0aW9uc1swXS5oZWFkaW5nICYmIHNlY3Rpb24uc3Vic2VjdGlvbnNbMF0udmFyaWFibGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElnbm9yZSBsb25lIGVtcHR5IGltcGxpY2l0IHN1YnNlY3Rpb25cbiAgICBzZWN0aW9uLnN1YnNlY3Rpb25zID0gW107XG4gIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VTdWJTZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3Vic2VjdGlvbiA9IHRoaXMuX3Rva2VuaXplci5zaGlmdCgpO1xuICBpZiAoc3Vic2VjdGlvbiBpbnN0YW5jZW9mIFN1YlNlY3Rpb24pIHtcbiAgICB0aGlzLnBhcnNlVmFycyhzdWJzZWN0aW9uKTtcbiAgICByZXR1cm4gc3Vic2VjdGlvbjtcbiAgfVxuICB0aGlzLl90b2tlbml6ZXIudW5zaGlmdChzdWJzZWN0aW9uKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlVmFycyA9IGZ1bmN0aW9uIChzdWJzZWN0aW9uKSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIHZhcmlhYmxlID0gdGhpcy5wYXJzZVZhcigpO1xuICAgIGlmICh2YXJpYWJsZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdWJzZWN0aW9uLmFkZFZhcih2YXJpYWJsZSk7XG4gIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VWYXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkb2NzdHJpbmcgPSB0aGlzLl90b2tlbml6ZXIuc2hpZnQoKTtcbiAgaWYgKCEoZG9jc3RyaW5nIGluc3RhbmNlb2YgVmFyRG9jc3RyaW5nKSkge1xuICAgIHRoaXMuX3Rva2VuaXplci51bnNoaWZ0KGRvY3N0cmluZyk7XG4gICAgZG9jc3RyaW5nID0gbnVsbDtcbiAgfVxuICB2YXIgdmFyaWFibGUgPSB0aGlzLl90b2tlbml6ZXIuc2hpZnQoKTtcbiAgaWYgKHZhcmlhYmxlIGluc3RhbmNlb2YgVmFyaWFibGUpIHtcbiAgICB2YXJpYWJsZS5kb2NzdHJpbmcgPSBkb2NzdHJpbmc7XG4gICAgcmV0dXJuIHZhcmlhYmxlO1xuICB9XG4gIHRoaXMuX3Rva2VuaXplci51bnNoaWZ0KHZhcmlhYmxlKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuIl19