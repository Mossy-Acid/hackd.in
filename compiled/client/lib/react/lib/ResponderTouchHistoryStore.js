/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ResponderTouchHistoryStore
 */

'use strict';

var EventPluginUtils = require('./EventPluginUtils');

var invariant = require('fbjs/lib/invariant');

var isMoveish = EventPluginUtils.isMoveish;
var isStartish = EventPluginUtils.isStartish;
var isEndish = EventPluginUtils.isEndish;

var MAX_TOUCH_BANK = 20;

/**
 * Touch position/time tracking information by touchID. Typically, we'll only
 * see IDs with a range of 1-20 (they are recycled when touches end and then
 * start again). This data is commonly needed by many different interaction
 * logic modules so precomputing it is very helpful to do once.
 * Each touch object in `touchBank` is of the following form:
 * { touchActive: boolean,
 *   startTimeStamp: number,
 *   startPageX: number,
 *   startPageY: number,
 *   currentPageX: number,
 *   currentPageY: number,
 *   currentTimeStamp: number
 * }
 */
var touchHistory = {
  touchBank: [],
  numberActiveTouches: 0,
  // If there is only one active touch, we remember its location. This prevents
  // us having to loop through all of the touches all the time in the most
  // common case.
  indexOfSingleActiveTouch: -1,
  mostRecentTimeStamp: 0
};

var timestampForTouch = function timestampForTouch(touch) {
  // The legacy internal implementation provides "timeStamp", which has been
  // renamed to "timestamp". Let both work for now while we iron it out
  // TODO (evv): rename timeStamp to timestamp in internal code
  return touch.timeStamp || touch.timestamp;
};

/**
 * TODO: Instead of making gestures recompute filtered velocity, we could
 * include a built in velocity computation that can be reused globally.
 * @param {Touch} touch Native touch object.
 */
var initializeTouchData = function initializeTouchData(touch) {
  return {
    touchActive: true,
    startTimeStamp: timestampForTouch(touch),
    startPageX: touch.pageX,
    startPageY: touch.pageY,
    currentPageX: touch.pageX,
    currentPageY: touch.pageY,
    currentTimeStamp: timestampForTouch(touch),
    previousPageX: touch.pageX,
    previousPageY: touch.pageY,
    previousTimeStamp: timestampForTouch(touch)
  };
};

var reinitializeTouchTrack = function reinitializeTouchTrack(touchTrack, touch) {
  touchTrack.touchActive = true;
  touchTrack.startTimeStamp = timestampForTouch(touch);
  touchTrack.startPageX = touch.pageX;
  touchTrack.startPageY = touch.pageY;
  touchTrack.currentPageX = touch.pageX;
  touchTrack.currentPageY = touch.pageY;
  touchTrack.currentTimeStamp = timestampForTouch(touch);
  touchTrack.previousPageX = touch.pageX;
  touchTrack.previousPageY = touch.pageY;
  touchTrack.previousTimeStamp = timestampForTouch(touch);
};

var validateTouch = function validateTouch(touch) {
  var identifier = touch.identifier;
  !(identifier != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Touch object is missing identifier') : invariant(false) : undefined;
  if (identifier > MAX_TOUCH_BANK) {
    console.warn('Touch identifier ' + identifier + ' is greater than maximum ' + 'supported ' + MAX_TOUCH_BANK + ' which causes performance issues ' + 'backfilling array locations for all of the indices.');
  }
};

var recordStartTouchData = function recordStartTouchData(touch) {
  var touchBank = touchHistory.touchBank;
  var identifier = touch.identifier;
  var touchTrack = touchBank[identifier];
  if (process.env.NODE_ENV !== 'production') {
    validateTouch(touch);
  }
  if (touchTrack) {
    reinitializeTouchTrack(touchTrack, touch);
  } else {
    touchBank[touch.identifier] = initializeTouchData(touch);
  }
  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
};

var recordMoveTouchData = function recordMoveTouchData(touch) {
  var touchBank = touchHistory.touchBank;
  var touchTrack = touchBank[touch.identifier];
  if (process.env.NODE_ENV !== 'production') {
    validateTouch(touch);
    !touchTrack ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Touch data should have been recorded on start') : invariant(false) : undefined;
  }
  touchTrack.touchActive = true;
  touchTrack.previousPageX = touchTrack.currentPageX;
  touchTrack.previousPageY = touchTrack.currentPageY;
  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;
  touchTrack.currentPageX = touch.pageX;
  touchTrack.currentPageY = touch.pageY;
  touchTrack.currentTimeStamp = timestampForTouch(touch);
  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
};

var recordEndTouchData = function recordEndTouchData(touch) {
  var touchBank = touchHistory.touchBank;
  var touchTrack = touchBank[touch.identifier];
  if (process.env.NODE_ENV !== 'production') {
    validateTouch(touch);
    !touchTrack ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Touch data should have been recorded on start') : invariant(false) : undefined;
  }
  touchTrack.previousPageX = touchTrack.currentPageX;
  touchTrack.previousPageY = touchTrack.currentPageY;
  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;
  touchTrack.currentPageX = touch.pageX;
  touchTrack.currentPageY = touch.pageY;
  touchTrack.currentTimeStamp = timestampForTouch(touch);
  touchTrack.touchActive = false;
  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
};

var ResponderTouchHistoryStore = {
  recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
    var touchBank = touchHistory.touchBank;
    if (isMoveish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordMoveTouchData);
    } else if (isStartish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordStartTouchData);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
      }
    } else if (isEndish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordEndTouchData);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrackToCheck = touchBank[i];
          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
            touchHistory.indexOfSingleActiveTouch = i;
            break;
          }
        }
        if (process.env.NODE_ENV !== 'production') {
          var activeTouchData = touchBank[touchHistory.indexOfSingleActiveTouch];
          var foundActive = activeTouchData != null && !!activeTouchData.touchActive;
          !foundActive ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot find single active touch') : invariant(false) : undefined;
        }
      }
    }
  },

  touchHistory: touchHistory
};

module.exports = ResponderTouchHistoryStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NsaWVudC9saWIvcmVhY3QvbGliL1Jlc3BvbmRlclRvdWNoSGlzdG9yeVN0b3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBV0E7O0FBRUEsSUFBSSxtQkFBbUIsUUFBUSxvQkFBUixDQUF2Qjs7QUFFQSxJQUFJLFlBQVksUUFBUSxvQkFBUixDQUFoQjs7QUFFQSxJQUFJLFlBQVksaUJBQWlCLFNBQWpDO0FBQ0EsSUFBSSxhQUFhLGlCQUFpQixVQUFsQztBQUNBLElBQUksV0FBVyxpQkFBaUIsUUFBaEM7O0FBRUEsSUFBSSxpQkFBaUIsRUFBckI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLElBQUksZUFBZTtBQUNqQixhQUFXLEVBRE07QUFFakIsdUJBQXFCLENBRko7Ozs7QUFNakIsNEJBQTBCLENBQUMsQ0FOVjtBQU9qQix1QkFBcUI7QUFQSixDQUFuQjs7QUFVQSxJQUFJLG9CQUFvQixTQUFwQixpQkFBb0IsQ0FBVSxLQUFWLEVBQWlCOzs7O0FBSXZDLFNBQU8sTUFBTSxTQUFOLElBQW1CLE1BQU0sU0FBaEM7QUFDRCxDQUxEOzs7Ozs7O0FBWUEsSUFBSSxzQkFBc0IsU0FBdEIsbUJBQXNCLENBQVUsS0FBVixFQUFpQjtBQUN6QyxTQUFPO0FBQ0wsaUJBQWEsSUFEUjtBQUVMLG9CQUFnQixrQkFBa0IsS0FBbEIsQ0FGWDtBQUdMLGdCQUFZLE1BQU0sS0FIYjtBQUlMLGdCQUFZLE1BQU0sS0FKYjtBQUtMLGtCQUFjLE1BQU0sS0FMZjtBQU1MLGtCQUFjLE1BQU0sS0FOZjtBQU9MLHNCQUFrQixrQkFBa0IsS0FBbEIsQ0FQYjtBQVFMLG1CQUFlLE1BQU0sS0FSaEI7QUFTTCxtQkFBZSxNQUFNLEtBVGhCO0FBVUwsdUJBQW1CLGtCQUFrQixLQUFsQjtBQVZkLEdBQVA7QUFZRCxDQWJEOztBQWVBLElBQUkseUJBQXlCLFNBQXpCLHNCQUF5QixDQUFVLFVBQVYsRUFBc0IsS0FBdEIsRUFBNkI7QUFDeEQs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LG1CQUFhLG1CQUFiLEdBQW1DLFlBQVksT0FBWixDQUFvQixNQUF2RDtBQUNBLFVBQUksYUFBYSxtQkFBYixLQUFxQyxDQUF6QyxFQUE0QztBQUMxQyxhQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksVUFBVSxNQUE5QixFQUFzQyxHQUF0QyxFQUEyQztBQUN6QyxjQUFJLG9CQUFvQixVQUFVLENBQVYsQ0FBeEI7QUFDQSxjQUFJLHFCQUFxQixJQUFyQixJQUE2QixrQkFBa0IsV0FBbkQsRUFBZ0U7QUFDOUQseUJBQWEsd0JBQWIsR0FBd0MsQ0FBeEM7QUFDQTtBQUNEO0FBQ0Y7QUFDRCxZQUFJLFFBQVEsR0FBUixDQUFZLFFBQVosS0FBeUIsWUFBN0IsRUFBMkM7QUFDekMsY0FBSSxrQkFBa0IsVUFBVSxhQUFhLHdCQUF2QixDQUF0QjtBQUNBLGNBQUksY0FBYyxtQkFBbUIsSUFBbkIsSUFBMkIsQ0FBQyxDQUFDLGdCQUFnQixXQUEvRDtBQUNBLFdBQUMsV0FBRCxHQUFlLFFBQVEsR0FBUixDQUFZLFFBQVosS0FBeUIsWUFBekIsR0FBd0MsVUFBVSxLQUFWLEVBQWlCLGlDQUFqQixDQUF4QyxHQUE4RixVQUFVLEtBQVYsQ0FBN0csR0FBZ0ksU0FBaEk7QUFDRDtBQUNGO0FBQ0Y7QUFDRixHQTdCOEI7O0FBK0IvQixnQkFBYztBQS9CaUIsQ0FBakM7O0FBa0NBLE9BQU8sT0FBUCxHQUFpQiwwQkFBakIiLCJmaWxlIjoiUmVzcG9uZGVyVG91Y2hIaXN0b3J5U3RvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVzcG9uZGVyVG91Y2hIaXN0b3J5U3RvcmVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblV0aWxzJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIGlzTW92ZWlzaCA9IEV2ZW50UGx1Z2luVXRpbHMuaXNNb3ZlaXNoO1xudmFyIGlzU3RhcnRpc2ggPSBFdmVudFBsdWdpblV0aWxzLmlzU3RhcnRpc2g7XG52YXIgaXNFbmRpc2ggPSBFdmVudFBsdWdpblV0aWxzLmlzRW5kaXNoO1xuXG52YXIgTUFYX1RPVUNIX0JBTksgPSAyMDtcblxuLyoqXG4gKiBUb3VjaCBwb3NpdGlvbi90aW1lIHRyYWNraW5nIGluZm9ybWF0aW9uIGJ5IHRvdWNoSUQuIFR5cGljYWxseSwgd2UnbGwgb25seVxuICogc2VlIElEcyB3aXRoIGEgcmFuZ2Ugb2YgMS0yMCAodGhleSBhcmUgcmVjeWNsZWQgd2hlbiB0b3VjaGVzIGVuZCBhbmQgdGhlblxuICogc3RhcnQgYWdhaW4pLiBUaGlzIGRhdGEgaXMgY29tbW9ubHkgbmVlZGVkIGJ5IG1hbnkgZGlmZmVyZW50IGludGVyYWN0aW9uXG4gKiBsb2dpYyBtb2R1bGVzIHNvIHByZWNvbXB1dGluZyBpdCBpcyB2ZXJ5IGhlbHBmdWwgdG8gZG8gb25jZS5cbiAqIEVhY2ggdG91Y2ggb2JqZWN0IGluIGB0b3VjaEJhbmtgIGlzIG9mIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAqIHsgdG91Y2hBY3RpdmU6IGJvb2xlYW4sXG4gKiAgIHN0YXJ0VGltZVN0YW1wOiBudW1iZXIsXG4gKiAgIHN0YXJ0UGFnZVg6IG51bWJlcixcbiAqICAgc3RhcnRQYWdlWTogbnVtYmVyLFxuICogICBjdXJyZW50UGFnZVg6IG51bWJlcixcbiAqICAgY3VycmVudFBhZ2VZOiBudW1iZXIsXG4gKiAgIGN1cnJlbnRUaW1lU3RhbXA6IG51bWJlclxuICogfVxuICovXG52YXIgdG91Y2hIaXN0b3J5ID0ge1xuICB0b3VjaEJhbms6IFtdLFxuICBudW1iZXJBY3RpdmVUb3VjaGVzOiAwLFxuICAvLyBJZiB0aGVyZSBpcyBvbmx5IG9uZSBhY3RpdmUgdG91Y2gsIHdlIHJlbWVtYmVyIGl0cyBsb2NhdGlvbi4gVGhpcyBwcmV2ZW50c1xuICAvLyB1cyBoYXZpbmcgdG8gbG9vcCB0aHJvdWdoIGFsbCBvZiB0aGUgdG91Y2hlcyBhbGwgdGhlIHRpbWUgaW4gdGhlIG1vc3RcbiAgLy8gY29tbW9uIGNhc2UuXG4gIGluZGV4T2ZTaW5nbGVBY3RpdmVUb3VjaDogLTEsXG4gIG1vc3RSZWNlbnRUaW1lU3RhbXA6IDBcbn07XG5cbnZhciB0aW1lc3RhbXBGb3JUb3VjaCA9IGZ1bmN0aW9uICh0b3VjaCkge1xuICAvLyBUaGUgbGVnYWN5IGludGVybmFsIGltcGxlbWVudGF0aW9uIHByb3ZpZGVzIFwidGltZVN0YW1wXCIsIHdoaWNoIGhhcyBiZWVuXG4gIC8vIHJlbmFtZWQgdG8gXCJ0aW1lc3RhbXBcIi4gTGV0IGJvdGggd29yayBmb3Igbm93IHdoaWxlIHdlIGlyb24gaXQgb3V0XG4gIC8vIFRPRE8gKGV2dik6IHJlbmFtZSB0aW1lU3RhbXAgdG8gdGltZXN0YW1wIGluIGludGVybmFsIGNvZGVcbiAgcmV0dXJuIHRvdWNoLnRpbWVTdGFtcCB8fCB0b3VjaC50aW1lc3RhbXA7XG59O1xuXG4vKipcbiAqIFRPRE86IEluc3RlYWQgb2YgbWFraW5nIGdlc3R1cmVzIHJlY29tcHV0ZSBmaWx0ZXJlZCB2ZWxvY2l0eSwgd2UgY291bGRcbiAqIGluY2x1ZGUgYSBidWlsdCBpbiB2ZWxvY2l0eSBjb21wdXRhdGlvbiB0aGF0IGNhbiBiZSByZXVzZWQgZ2xvYmFsbHkuXG4gKiBAcGFyYW0ge1RvdWNofSB0b3VjaCBOYXRpdmUgdG91Y2ggb2JqZWN0LlxuICovXG52YXIgaW5pdGlhbGl6ZVRvdWNoRGF0YSA9IGZ1bmN0aW9uICh0b3VjaCkge1xuICByZXR1cm4ge1xuICAgIHRvdWNoQWN0aXZlOiB0cnVlLFxuICAgIHN0YXJ0VGltZVN0YW1wOiB0aW1lc3RhbXBGb3JUb3VjaCh0b3VjaCksXG4gICAgc3RhcnRQYWdlWDogdG91Y2gucGFnZVgsXG4gICAgc3RhcnRQYWdlWTogdG91Y2gucGFnZVksXG4gICAgY3VycmVudFBhZ2VYOiB0b3VjaC5wYWdlWCxcbiAgICBjdXJyZW50UGFnZVk6IHRvdWNoLnBhZ2VZLFxuICAgIGN1cnJlbnRUaW1lU3RhbXA6IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKSxcbiAgICBwcmV2aW91c1BhZ2VYOiB0b3VjaC5wYWdlWCxcbiAgICBwcmV2aW91c1BhZ2VZOiB0b3VjaC5wYWdlWSxcbiAgICBwcmV2aW91c1RpbWVTdGFtcDogdGltZXN0YW1wRm9yVG91Y2godG91Y2gpXG4gIH07XG59O1xuXG52YXIgcmVpbml0aWFsaXplVG91Y2hUcmFjayA9IGZ1bmN0aW9uICh0b3VjaFRyYWNrLCB0b3VjaCkge1xuICB0b3VjaFRyYWNrLnRvdWNoQWN0aXZlID0gdHJ1ZTtcbiAgdG91Y2hUcmFjay5zdGFydFRpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKTtcbiAgdG91Y2hUcmFjay5zdGFydFBhZ2VYID0gdG91Y2gucGFnZVg7XG4gIHRvdWNoVHJhY2suc3RhcnRQYWdlWSA9IHRvdWNoLnBhZ2VZO1xuICB0b3VjaFRyYWNrLmN1cnJlbnRQYWdlWCA9IHRvdWNoLnBhZ2VYO1xuICB0b3VjaFRyYWNrLmN1cnJlbnRQYWdlWSA9IHRvdWNoLnBhZ2VZO1xuICB0b3VjaFRyYWNrLmN1cnJlbnRUaW1lU3RhbXAgPSB0aW1lc3RhbXBGb3JUb3VjaCh0b3VjaCk7XG4gIHRvdWNoVHJhY2sucHJldmlvdXNQYWdlWCA9IHRvdWNoLnBhZ2VYO1xuICB0b3VjaFRyYWNrLnByZXZpb3VzUGFnZVkgPSB0b3VjaC5wYWdlWTtcbiAgdG91Y2hUcmFjay5wcmV2aW91c1RpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKTtcbn07XG5cbnZhciB2YWxpZGF0ZVRvdWNoID0gZnVuY3Rpb24gKHRvdWNoKSB7XG4gIHZhciBpZGVudGlmaWVyID0gdG91Y2guaWRlbnRpZmllcjtcbiAgIShpZGVudGlmaWVyICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RvdWNoIG9iamVjdCBpcyBtaXNzaW5nIGlkZW50aWZpZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIGlmIChpZGVudGlmaWVyID4gTUFYX1RPVUNIX0JBTkspIHtcbiAgICBjb25zb2xlLndhcm4oJ1RvdWNoIGlkZW50aWZpZXIgJyArIGlkZW50aWZpZXIgKyAnIGlzIGdyZWF0ZXIgdGhhbiBtYXhpbXVtICcgKyAnc3VwcG9ydGVkICcgKyBNQVhfVE9VQ0hfQkFOSyArICcgd2hpY2ggY2F1c2VzIHBlcmZvcm1hbmNlIGlzc3VlcyAnICsgJ2JhY2tmaWxsaW5nIGFycmF5IGxvY2F0aW9ucyBmb3IgYWxsIG9mIHRoZSBpbmRpY2VzLicpO1xuICB9XG59O1xuXG52YXIgcmVjb3JkU3RhcnRUb3VjaERhdGEgPSBmdW5jdGlvbiAodG91Y2gpIHtcbiAgdmFyIHRvdWNoQmFuayA9IHRvdWNoSGlzdG9yeS50b3VjaEJhbms7XG4gIHZhciBpZGVudGlmaWVyID0gdG91Y2guaWRlbnRpZmllcjtcbiAgdmFyIHRvdWNoVHJhY2sgPSB0b3VjaEJhbmtbaWRlbnRpZmllcl07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVUb3VjaCh0b3VjaCk7XG4gIH1cbiAgaWYgKHRvdWNoVHJhY2spIHtcbiAgICByZWluaXRpYWxpemVUb3VjaFRyYWNrKHRvdWNoVHJhY2ssIHRvdWNoKTtcbiAgfSBlbHNlIHtcbiAgICB0b3VjaEJhbmtbdG91Y2guaWRlbnRpZmllcl0gPSBpbml0aWFsaXplVG91Y2hEYXRhKHRvdWNoKTtcbiAgfVxuICB0b3VjaEhpc3RvcnkubW9zdFJlY2VudFRpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKTtcbn07XG5cbnZhciByZWNvcmRNb3ZlVG91Y2hEYXRhID0gZnVuY3Rpb24gKHRvdWNoKSB7XG4gIHZhciB0b3VjaEJhbmsgPSB0b3VjaEhpc3RvcnkudG91Y2hCYW5rO1xuICB2YXIgdG91Y2hUcmFjayA9IHRvdWNoQmFua1t0b3VjaC5pZGVudGlmaWVyXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZVRvdWNoKHRvdWNoKTtcbiAgICAhdG91Y2hUcmFjayA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUb3VjaCBkYXRhIHNob3VsZCBoYXZlIGJlZW4gcmVjb3JkZWQgb24gc3RhcnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cbiAgdG91Y2hUcmFjay50b3VjaEFjdGl2ZSA9IHRydWU7XG4gIHRvdWNoVHJhY2sucHJldmlvdXNQYWdlWCA9IHRvdWNoVHJhY2suY3VycmVudFBhZ2VYO1xuICB0b3VjaFRyYWNrLnByZXZpb3VzUGFnZVkgPSB0b3VjaFRyYWNrLmN1cnJlbnRQYWdlWTtcbiAgdG91Y2hUcmFjay5wcmV2aW91c1RpbWVTdGFtcCA9IHRvdWNoVHJhY2suY3VycmVudFRpbWVTdGFtcDtcbiAgdG91Y2hUcmFjay5jdXJyZW50UGFnZVggPSB0b3VjaC5wYWdlWDtcbiAgdG91Y2hUcmFjay5jdXJyZW50UGFnZVkgPSB0b3VjaC5wYWdlWTtcbiAgdG91Y2hUcmFjay5jdXJyZW50VGltZVN0YW1wID0gdGltZXN0YW1wRm9yVG91Y2godG91Y2gpO1xuICB0b3VjaEhpc3RvcnkubW9zdFJlY2VudFRpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKTtcbn07XG5cbnZhciByZWNvcmRFbmRUb3VjaERhdGEgPSBmdW5jdGlvbiAodG91Y2gpIHtcbiAgdmFyIHRvdWNoQmFuayA9IHRvdWNoSGlzdG9yeS50b3VjaEJhbms7XG4gIHZhciB0b3VjaFRyYWNrID0gdG91Y2hCYW5rW3RvdWNoLmlkZW50aWZpZXJdO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlVG91Y2godG91Y2gpO1xuICAgICF0b3VjaFRyYWNrID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RvdWNoIGRhdGEgc2hvdWxkIGhhdmUgYmVlbiByZWNvcmRlZCBvbiBzdGFydCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHVuZGVmaW5lZDtcbiAgfVxuICB0b3VjaFRyYWNrLnByZXZpb3VzUGFnZVggPSB0b3VjaFRyYWNrLmN1cnJlbnRQYWdlWDtcbiAgdG91Y2hUcmFjay5wcmV2aW91c1BhZ2VZID0gdG91Y2hUcmFjay5jdXJyZW50UGFnZVk7XG4gIHRvdWNoVHJhY2sucHJldmlvdXNUaW1lU3RhbXAgPSB0b3VjaFRyYWNrLmN1cnJlbnRUaW1lU3RhbXA7XG4gIHRvdWNoVHJhY2suY3VycmVudFBhZ2VYID0gdG91Y2gucGFnZVg7XG4gIHRvdWNoVHJhY2suY3VycmVudFBhZ2VZID0gdG91Y2gucGFnZVk7XG4gIHRvdWNoVHJhY2suY3VycmVudFRpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKTtcbiAgdG91Y2hUcmFjay50b3VjaEFjdGl2ZSA9IGZhbHNlO1xuICB0b3VjaEhpc3RvcnkubW9zdFJlY2VudFRpbWVTdGFtcCA9IHRpbWVzdGFtcEZvclRvdWNoKHRvdWNoKTtcbn07XG5cbnZhciBSZXNwb25kZXJUb3VjaEhpc3RvcnlTdG9yZSA9IHtcbiAgcmVjb3JkVG91Y2hUcmFjazogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgICB2YXIgdG91Y2hCYW5rID0gdG91Y2hIaXN0b3J5LnRvdWNoQmFuaztcbiAgICBpZiAoaXNNb3ZlaXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgIG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzLmZvckVhY2gocmVjb3JkTW92ZVRvdWNoRGF0YSk7XG4gICAgfSBlbHNlIGlmIChpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkpIHtcbiAgICAgIG5hdGl2ZUV2ZW50LmNoYW5nZWRUb3VjaGVzLmZvckVhY2gocmVjb3JkU3RhcnRUb3VjaERhdGEpO1xuICAgICAgdG91Y2hIaXN0b3J5Lm51bWJlckFjdGl2ZVRvdWNoZXMgPSBuYXRpdmVFdmVudC50b3VjaGVzLmxlbmd0aDtcbiAgICAgIGlmICh0b3VjaEhpc3RvcnkubnVtYmVyQWN0aXZlVG91Y2hlcyA9PT0gMSkge1xuICAgICAgICB0b3VjaEhpc3RvcnkuaW5kZXhPZlNpbmdsZUFjdGl2ZVRvdWNoID0gbmF0aXZlRXZlbnQudG91Y2hlc1swXS5pZGVudGlmaWVyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNFbmRpc2godG9wTGV2ZWxUeXBlKSkge1xuICAgICAgbmF0aXZlRXZlbnQuY2hhbmdlZFRvdWNoZXMuZm9yRWFjaChyZWNvcmRFbmRUb3VjaERhdGEpO1xuICAgICAgdG91Y2hIaXN0b3J5Lm51bWJlckFjdGl2ZVRvdWNoZXMgPSBuYXRpdmVFdmVudC50b3VjaGVzLmxlbmd0aDtcbiAgICAgIGlmICh0b3VjaEhpc3RvcnkubnVtYmVyQWN0aXZlVG91Y2hlcyA9PT0gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdWNoQmFuay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0b3VjaFRyYWNrVG9DaGVjayA9IHRvdWNoQmFua1tpXTtcbiAgICAgICAgICBpZiAodG91Y2hUcmFja1RvQ2hlY2sgIT0gbnVsbCAmJiB0b3VjaFRyYWNrVG9DaGVjay50b3VjaEFjdGl2ZSkge1xuICAgICAgICAgICAgdG91Y2hIaXN0b3J5LmluZGV4T2ZTaW5nbGVBY3RpdmVUb3VjaCA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgYWN0aXZlVG91Y2hEYXRhID0gdG91Y2hCYW5rW3RvdWNoSGlzdG9yeS5pbmRleE9mU2luZ2xlQWN0aXZlVG91Y2hdO1xuICAgICAgICAgIHZhciBmb3VuZEFjdGl2ZSA9IGFjdGl2ZVRvdWNoRGF0YSAhPSBudWxsICYmICEhYWN0aXZlVG91Y2hEYXRhLnRvdWNoQWN0aXZlO1xuICAgICAgICAgICFmb3VuZEFjdGl2ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluZCBzaW5nbGUgYWN0aXZlIHRvdWNoJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRvdWNoSGlzdG9yeTogdG91Y2hIaXN0b3J5XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc3BvbmRlclRvdWNoSGlzdG9yeVN0b3JlOyJdfQ==